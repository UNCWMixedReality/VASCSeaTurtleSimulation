using System.Collections;
using System.Collections.Generic;
using System;
using System.IO;
using System.Text;
using UnityEngine;
using UnityEngine.UI;

public class InstructionManagerM2 : MonoBehaviour
{
	public GameObject TextBox;
	public GameObject InstructionPanel;
	public GameObject EggPanel;
	public GameObject playerTracker;
	public GameObject MarkerExcavate;
	public GameObject MarkerMeasure;
	public GameObject MarkerReplace;
	public GameObject MarkerDig;
	public GameObject MarkerCover;
	public GameObject MarkerSign;
	public float oneStart;
	public float twoStart;
	public float threeStart;
	public float fourStart;
	public float fiveStart;
	public float sixStart;
	public AudioConvoM2 AC;
	public InteractableToggle IT;
	public Gloves gloves;

	private bool switchActive;  //button for toggling panel on and off
	private bool playedFirst;   //keeps track of if the first instructions have been played
	public bool active;			//keeps track of whether the panel is currently active
	public bool taskActive;		//keeps track of if a task is active
	private int current;		//int keeping track of the current instruction being displayed
	public int range;			//how close the player must be to start a task
	private int taskTracker;	//keeps track of which task the player is on
	private Text text;
	//private static readonly string textFile = Directory.GetCurrentDirectory() + @"\Assets\Scripts\HUD\InstructionsM2.txt";
	private string[] instructions = new string[16];

	public IEnumerator Wait(int wait, int index)
	{
		//change the panel after a given amount of time has passed
		yield return new WaitForSeconds(wait);
		changePanel(index);
		if (index == 2)
		{
			yield return new WaitForSeconds(4);
			MarkerExcavate.SetActive(true);
			gloves.pickupL.SetActive(true);
			gloves.pickupR.SetActive(true);
        }
	}

	void Start()
    {
		EggPanel.SetActive(false);
		MarkerExcavate.SetActive(false);
		MarkerMeasure.SetActive(false);
		MarkerReplace.SetActive(false);
		MarkerDig.SetActive(false);
		MarkerCover.SetActive(false);
		MarkerSign.SetActive(false);
		active = true;
		taskActive = false;
		current = 0;
		taskTracker = 0;
        text = TextBox.GetComponent<Text>();
		instructions[0] = ("Welcome! This is Module 2 of the VASC Sea Turtle Simlation.");
		instructions[1] = ("During this simulation, you will move sea turtle eggs from an endangered nest to a safer one.");//
		instructions[2] = ("When you're ready, go ahead and move to the first marker to get started.");
		instructions[3] = ("Your first task is to dig up this turtle nest. Grab the gloves to put them on and then dig in the sand until you can see the eggs.");//
		instructions[4] = ("Good job! You're ready to move on to the next task.");
		instructions[5] = ("Next, these eggs need to be carefully moved. Some are cracked, though, and will need to be separated from the good eggs.");//
		instructions[6] = ("Examine the eggs, and put them in the red bucket if they're cracked, or the green bucket if they aren't.");//
		instructions[7] = ("Good job! Follow the red flags to the next nest further down the beach");//
		instructions[8] = ("Here you need to place the good eggs into their new nest. Take the eggs from the bucket and place them in the new nest. The light blue sphere show where the eggs should go.");//
		instructions[9] = ("Good job! Now the nest needs to be covered up and protected so predators don't dig up the nest and eat the eggs.");//
		instructions[10] = ("Start by using the shovel to move some sand over the eggs.");
		instructions[11] = ("Good job! Now you need to place a protective cage over the nest.");
		instructions[12] = ("Pick up the wireframe cage and place it on top of the nest.");
		instructions[13] = ("Good job! All that's left is to mark the nest's location with a sign so people will know to be careful around it.");//
		instructions[14] = ("Move the sign over to the nest to mark its location.");
		instructions[15] = ("Good job! That's it for this Module.");
		text.text = instructions[current];

		StartCoroutine(Wait(3, 1));
		StartCoroutine(Wait(7, 2));
    }

    void Update()
    {
		if (!playedFirst)
		{
			AC.playSound();
			playedFirst = true;
		}
		//switchActive = OVRInput.GetUp(OVRInput.RawButton.B);
		//if(switchActive)
		//{
			//Debug.Log("Canvas toggle");
			//togglePanel();
		//}

		if(Vector3.Distance(playerTracker.transform.position, MarkerExcavate.transform.position) < range && !taskActive && taskTracker == 0 && MarkerExcavate.activeSelf){
			if(!active){		//activate the panel if it is inactive
				togglePanel();
			}			
			changePanel(3); //load task 1 instructions
			AC.playSound();
			Debug.Log("first task started");
			MarkerExcavate.SetActive(false);
			taskTracker++;
			taskActive = true;
			oneStart = Time.time;
		}
		if(Vector3.Distance(playerTracker.transform.position, MarkerMeasure.transform.position) < range && !taskActive && taskTracker == 1){
			if(!active){		//activate the panel if it is inactive
				togglePanel();
			}
			changePanel(5); //load task 2 instructions
			AC.playSound();
			Debug.Log("second task started");
			MarkerMeasure.SetActive(false);
			EggPanel.SetActive(true);
			StartCoroutine(Wait(6, 6));
			taskTracker++;
			taskActive = true;
			twoStart = Time.time;
		}
		if(Vector3.Distance(playerTracker.transform.position, MarkerReplace.transform.position) < range && !taskActive && taskTracker == 2){
			if(!active){		//activate the panel if it is inactive
				togglePanel();
			}
			changePanel(8); //load task 3 instructions
			AC.playSound();
			Debug.Log("third task started");
			IT.toggle(1, 9);
			IT.toggle(2, 9);
			MarkerReplace.SetActive(false);
			taskTracker++;
			taskActive = true;
			threeStart = Time.time;
		}
		if(Vector3.Distance(playerTracker.transform.position, MarkerDig.transform.position) < range && !taskActive && taskTracker == 3){
			if(!active){
				togglePanel();
			}
			changePanel(10);
			AC.playSound();
			IT.toggle(0, 9);
			MarkerDig.SetActive(false);
			taskTracker++;
			taskActive = true;
			fourStart = Time.time;
		}
		if(Vector3.Distance(playerTracker.transform.position, MarkerCover.transform.position) < range && !taskActive && taskTracker == 4){
			if(!active){
				togglePanel();
			}
			changePanel(12);
			AC.playSound();
			IT.toggle(3, 9);
			MarkerCover.SetActive(false);
			taskTracker++;
			taskActive = true;
			fiveStart = Time.time;
		}
		if(Vector3.Distance(playerTracker.transform.position, MarkerSign.transform.position) < range && !taskActive && taskTracker == 5)
        {
            if (!active)
            {
				togglePanel();
            }
			changePanel(14);
			AC.playSound();
			IT.toggle(4, 9);
			MarkerSign.SetActive(false);
			taskTracker++;
			taskActive = true;
			sixStart = Time.time;
        }
    }
	
	public void togglePanel(){
		active = !active;
		if(active){
			InstructionPanel.SetActive(true);
		}
		else{
			InstructionPanel.SetActive(false);
		}
	}
	
	public void changePanel(int value){
		text.text = instructions[value];
		current = value;
	}
}
