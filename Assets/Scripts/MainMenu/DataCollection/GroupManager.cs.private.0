using System;
using System.Collections;
using System.Collections.Generic;
using System.Net;
using System.Net.NetworkInformation;
using System.Threading.Tasks;
using UnityEngine;
using UnityEngine.Networking;
using UnityEngine.UI;

public class GroupManager : MonoBehaviour
{

    [Serializable]
    public class Student
    {
        public int id;
        public string name;
        public int course_id;
    }

    [Serializable]
    public class Group
    {
        public int course_id;
        public int headset_id;
        public List<Student> members;
    }

    // Gameobject Connections
    public GameObject ButtonPrefab;
    public LoginStudent LoginManager;
    public Transform ContentPanel;
    public GameObject HeadsetErrorState;
    public GameObject GroupErrorState;

    // Endpoint Management Variables
    private readonly string PROD_API_KEY = "5gjPQ5pR.0qkIOviB2jL37e1AUi2MLBx36FVPlqUS";
    private readonly string DEV_API_KEY = "5geExWWA.quPbv9Mtup3ARYGZlVDc5SpRPaogsmim";
    private readonly string PROD_API_ENDPOINT = "https://vr.uncw.edu/VASC/api/v1/";
    private readonly string DEV_API_ENDPOINT = "http://localhost:8009/api/v1/";

    // Globals
    private readonly bool dev = false;
    private Tuple<bool, string> ErrorState;
    string device_id = null;
    string API_KEY = null;
    string API_ENDPOINT = null;
    Dictionary<string, string> players = new Dictionary<string, string>();

    // ===================================================================== //
    // ======================= Lifecycle Hooks ============================= //
    async void OnEnable()
    {

        if (await APIManager.HeadsetIsConnectedToInternet())
        {
            await PullGroupFromServer();
        } else
        {
            ReadPlayersFromLocalGameSave();
        }


        PopulateContentPanelWithStudentsOrErrorState();
    }

    private void OnDisable()
    {
        StartCoroutine(CleanupBoard());
    }


    // ===================================================================== //
    // ==================== Group Retrieval Logic ========================== //
    async Task PullGroupFromServer()
    {
        APIManager.Group NewGroup = new APIManager.Group();
        string DeviceID = SystemInfo.deviceUniqueIdentifier;

        (bool, bool, string, APIManager.Group) results = await APIManager.RetrieveHeadsetGroupAssignmentFromServer(DeviceID);
        string GroupEndpoint = $"{API_ENDPOINT}group/{DeviceID}/";

        // Check if call itself failed
        if (results.Item1 is false)
        {
            LogManager.LogMessage(results.Item3, true);
        }
        // Check for anything other than an HTTP_200 response
        else if (results.Item2 is false)
        {
            if (results.Item3.Contains("registered"))
            {
                LogManager.LogMessage(results.Item3, true);
                ErrorState = new Tuple<bool, string>(true, "Headset");
            }
            else
            {
                LogManager.LogMessage(results.Item3, true);
                ErrorState = new Tuple<bool, string>(true, "Group");
            }
        } 
        // If we've made it here, we assume the call was a success
        else
        {
            NewGroup = results.Item4;
            foreach (APIManager.Student member in NewGroup.members)
            {
                players[member.name] = member.id.ToString();
            }

            WritePlayersToLocalGameSave();

            LoginManager.Players = players;
            ErrorState = new Tuple<bool, string>(false, null);
        }

    }



    // ===================================================================== //
    // ==================== PlayerPrefs Management ========================= //
    void WritePlayersToLocalGameSave()
    {
        List<String> StringToSave = new List<String>();

        foreach (String key in players.Keys)
        {
            StringToSave.Add($"{key}-{players[key].ToString()}");
        }

        string PlayerList = String.Join(",", StringToSave.ToArray());
        LogManager.LogMessage("Player List: " + PlayerList);

        PlayerPrefs.SetString("Players", PlayerList);
        PlayerPrefs.Save();
    }

    void ReadPlayersFromLocalGameSave()
    {
        Debug.Log("Reading from local player save");
        if (PlayerPrefs.HasKey("Players")) {
            String StoredString = PlayerPrefs.GetString("Players");
            String[] EachPlayer = StoredString.Split(',');


            foreach (string Player in EachPlayer)
            {
                String[] PlayerInfo = Player.Split('-');
                players[PlayerInfo[0]] = PlayerInfo[1];

            }
            LoginManager.Players = players;

        }
        else
        {
            Debug.LogError("Unable To find the players stored in PlayerPrefs!");
        }
        
    }

    // ===================================================================== //
    // ==================== Instantiation Tasks ============================ //
    void NewStudentButton(string StudentName)
    {
        GameObject NewButton = Instantiate(ButtonPrefab, ContentPanel);
        NewButton.GetComponentInChildren<Text>().text = StudentName;
    }

    void PopulateContentPanelWithStudentsOrErrorState()
    {
        if ((ErrorState != null) && (ErrorState.Item1))
        {
            if (ErrorState.Item2.Contains("set"))
            {
                HeadsetErrorState.SetActive(true);
            } else
            {
                GroupErrorState.SetActive(true);
            }
        }
        else
        {
            foreach (string Student in players.Keys)
            {
                NewStudentButton(Student);
            }
        }
        
    }

    IEnumerator CleanupBoard()
    {
        for (int i = ContentPanel.childCount - 1; i> 0; i--)
        {
            GameObject.Destroy(ContentPanel.GetChild(i).gameObject);
            yield return null;
        }

        HeadsetErrorState.SetActive(false);
        GroupErrorState.SetActive(false);

    }

}
