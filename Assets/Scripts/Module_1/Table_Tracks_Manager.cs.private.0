using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using DataCollection;
//Script By: Cameron Detig 10/16/2020
//Manages the turtle identification activity and determines when to switch to the next activity.

public class Table_Tracks_Manager : MonoBehaviour
{

    public GameObject Green_Tracks;
    public GameObject Loggerhead_Tracks;
    public GameObject Leatherback_Tracks;
    public GameObject Load;

	public InstructionManager instMan;
    public AudioFeedback audiofeedback;
    public Progress prog;

	public Image incorrect;
    public Image correct;
	
	public int wrong = 0;

    public AudioSource Wrong1;
    public AudioSource Wrong2;
    public AudioSource Wrong3;
    public AudioSource Wrong4;
    public AudioSource Wrong5;
    public AudioSource LGH1;
    public AudioSource LGH2;
    public AudioSource GRN1;
    public AudioSource GRN2;
    public AudioSource GRN3;
    public AudioSource LTB1;
    public AudioSource LTB2;
    
    public AudioSource lastPlayed;
    private AudioSource nextToPlay;
    public int backlog = 0;
    private Queue<AudioSource> Backlog = new Queue<AudioSource>();

    private bool task3Done = false;
	public Button GreenButton;
	public Button LoggerheadButton;
	public Button LeatherbackButton;
    //public TableManager tableManager;

    private List<GameObject> tracks = new List<GameObject>();
    private int currentTrackNum = -1;
    private float scaleDuration1 = 2;

    private AudioSource[] wrongButton = new AudioSource[5];
    private AudioSource[] lgh = new AudioSource[2];
    private AudioSource[] grn = new AudioSource[3];
    private AudioSource[] ltb = new AudioSource[2];

    void Start()
    {

        tracks.Add(Green_Tracks);
        tracks.Add(Loggerhead_Tracks);
        tracks.Add(Leatherback_Tracks);
        Load.SetActive(false);

        GreenButton.interactable = false;
        LoggerheadButton.interactable = false;
        LeatherbackButton.interactable = false;

        for (int i = 0; i < tracks.Count; i++)
        {
            tracks[i].transform.localScale = new Vector3(0, 0, 0);
            tracks[i].SetActive(true);
        }
        //set up lists
        wrongButton[0] = Wrong1;
        wrongButton[1] = Wrong2;
        wrongButton[2] = Wrong3;
        wrongButton[3] = Wrong4;
        wrongButton[4] = Wrong5;

        lgh[0] = LGH1;
        lgh[1] = LGH2;

        grn[0] = GRN1;
        grn[1] = GRN2;
        grn[2] = GRN3;

        ltb[0] = LTB1;
        ltb[1] = LTB2;

        lastPlayed = Wrong1;
    }


    void Update()
    {
        if (backlog > 0)
        {
            if (!lastPlayed.isPlaying)
            {
                backlog--;
                lastPlayed = Backlog.Dequeue();
                lastPlayed.Play();
            }
        }

    }

    public void nextTrack() //Will be called by the TableManager script to start the activity.
    {
        if (currentTrackNum < tracks.Count - 1) //Don't run if at the end of the list
        {
            print("Next Track");
            if (currentTrackNum == -1) //If this is the first turtle
            {
                StartCoroutine(scaleUp(0));
                audiofeedback.playSelection();
                //enable button selection
                GreenButton.interactable = true;
                LoggerheadButton.interactable = true;
                LeatherbackButton.interactable = true;
                // line added by Blake to log correct choices
                DcDataLogging.SetCorrectAnswer("TrackGuessing", "Green");

            }
            else //If this is the second or third turtle
            {
                StartCoroutine(scaleDown(currentTrackNum));
                StartCoroutine(scaleUp(currentTrackNum + 1));
                // line added by Blake to log correct choices
                DcDataLogging.SetCorrectAnswer("TrackGuessing", new [] {
                    "Loggerhead", "Leatherback"}[currentTrackNum]);
            }

            currentTrackNum += 1;
        }
        else //End of activity
        {
            StartCoroutine(scaleDown(currentTrackNum));
            //tableManager.nextTable();
        }
    }

    public void selectTracks(string trackName)
    {
        if (trackName == "Green" && tracks[currentTrackNum] == Green_Tracks)
        {
            print("Green correct choice");
			Correct();
            playNoise(grn, grn.Length);
            nextTrack();
            prog.TickProgressBar();
        }
        else if (trackName == "Loggerhead" && tracks[currentTrackNum] == Loggerhead_Tracks)
        {
            print("Loggerhead correct choice");
			Correct();
            playNoise(lgh, lgh.Length);
            nextTrack();
            prog.TickProgressBar();
        }
        else if (trackName == "Leatherback" && tracks[currentTrackNum] == Leatherback_Tracks)
        {
            nextTrack();
            print("Leatherback correct choice");
			Correct();
            playNoise(ltb, ltb.Length);
            prog.TickProgressBar();
			GreenButton.interactable = false;
			LoggerheadButton.interactable = false;
			LeatherbackButton.interactable = false;
            task3Done = true;
            /*if(!instMan.active){
				instMan.togglePanel();
			}
            instMan.AC.playSound(11);
            instMan.changePanel(15);
			instMan.taskActive = false;*/
            audiofeedback.playCompletion();
        }
        else
        {
			Incorrect();
			wrong++;
            print("Incorrect choice");
        }
    }


    public IEnumerator scaleUp(int index) //Scales up the active turtle.
    {
        float timer = 0f;
        Vector3 startScale = new Vector3(0, 0, 0);
        Vector3 distance = new Vector3(1, 1, 1) - startScale;

        while (timer < scaleDuration1)
        {
            timer += Time.deltaTime;
            tracks[index].transform.localScale = startScale + distance * timer / scaleDuration1; //Scale the turtle up
            yield return null;
        }
    }

    public IEnumerator scaleDown(int index) //Scales down the inactive turtle.
    {
        float timer = 0f;
        Vector3 startScale = new Vector3(1, 1, 1);
        Vector3 distance = new Vector3(0, 0, 0) - startScale;

        while (timer < scaleDuration1)
        {
            timer += Time.deltaTime;
            tracks[index].transform.localScale = startScale + distance * timer / scaleDuration1; //Scale the turtle up
            yield return null;
        }
    }

    public bool getTask3Done()
    {
        return task3Done;
    }
	
	private void Correct()
	{
		correct.color = new Color(1, 1, 1, 1);
        incorrect.color = new Color(1, 1, 1, 0);
        audiofeedback.playGood();
	}
	
	private void Incorrect()
	{
		correct.color = new Color(1, 1, 1, 0);
        incorrect.color = new Color(1, 1, 1, 1);
        audiofeedback.playBad();
        playNoise(wrongButton, wrongButton.Length);
	}

    private void playNoise(AudioSource[] audioList, int length)
    {
        System.Random rnd = new System.Random();
        int track = rnd.Next(length);
        if (!lastPlayed.isPlaying)
        {
            audioList[track].Play();
            lastPlayed = audioList[track];
        }
        else
        {
            backlog++;
            Backlog.Enqueue(audioList[track]);
        }
    }
}
